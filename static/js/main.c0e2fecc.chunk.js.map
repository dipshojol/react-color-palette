{"version":3,"sources":["img/logo.gif","components/Channel.js","components/Swatch.js","components/Palette.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Channel","_ref","value","changeRgb","rgb","updateRgb","newRgb","console","log","react_default","a","createElement","className","type","onClick","event","onChange","parseInt","target","Swatch","red","green","blue","_useState","useState","_useState2","Object","slicedToArray","r","setR","_useState3","_useState4","g","setG","_useState5","_useState6","b","setB","styles","backgroundColor","concat","style","src_components_Channel","Palette","allSwatches","swatches","map","col","i","src_components_Swatch","key","App","id","src_components_Palette","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+NAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,2IC6BzBC,eA1BC,SAAAC,GAA0B,IAAvBC,EAAuBD,EAAvBC,MAAOC,EAAgBF,EAAhBE,UAIlBC,EAAMF,EAENG,EAAY,SAACC,GACbA,EAAS,IACXA,EAAS,KACFA,EAAS,IAAMA,KACtBA,EAAS,GAEXH,EAAUG,IAIZ,OADAC,QAAQC,IAAR,uBAEEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,UAAQE,KAAK,SAASD,UAAU,SAASE,QAAU,SAAAC,GAAK,OAAIV,EAAWD,EAAM,MAA7E,KACAK,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOD,UAAU,MAAMV,MAAQE,EAAMY,SAAW,SAAAD,GAAK,OAAIV,EAAWY,SAASF,EAAMG,OAAOhB,WACtGO,EAAAC,EAAAC,cAAA,UAAQE,KAAK,SAASD,UAAU,WAAWE,QAAU,SAAAC,GAAK,OAAIV,EAAWD,EAAM,MAA/E,QCISe,EAvBA,SAAAlB,GAA0B,IAAvBmB,EAAuBnB,EAAvBmB,IAAKC,EAAkBpB,EAAlBoB,MAAOC,EAAWrB,EAAXqB,KAAWC,EAErBC,mBAASJ,GAFYK,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEhCK,EAFgCH,EAAA,GAE7BI,EAF6BJ,EAAA,GAAAK,EAGrBN,mBAASH,GAHYU,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAGhCE,EAHgCD,EAAA,GAG7BE,EAH6BF,EAAA,GAAAG,EAIrBV,mBAASF,GAJYa,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAIhCE,EAJgCD,EAAA,GAI7BE,EAJ6BF,EAAA,GAOjCG,EAAS,CACbC,gBAAe,QAAAC,OAAUZ,EAAV,MAAAY,OAAgBR,EAAhB,MAAAQ,OAAsBJ,EAAtB,OAGjB,OACE3B,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAS6B,MAAQH,GAC7B7B,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAC+B,EAAD,CAASxC,MAAO0B,EAAGzB,UAAW0B,IAC9BpB,EAAAC,EAAAC,cAAC+B,EAAD,CAASxC,MAAO8B,EAAG7B,UAAW8B,IAC9BxB,EAAAC,EAAAC,cAAC+B,EAAD,CAASxC,MAAOkC,EAAGjC,UAAWkC,IAC9B5B,EAAAC,EAAAC,cAAA,oBCJSgC,EAbC,SAAA1C,GAAkB,IAI1B2C,EAJ0B3C,EAAf4C,SAIYC,IAAK,SAACC,EAAKC,GAAN,OAAYvC,EAAAC,EAAAC,cAACsC,EAAD,CAAQC,IAAKF,EAAG5B,IAAK2B,EAAInB,EAAGP,MAAO0B,EAAIf,EAAGV,KAAMyB,EAAIX,MAElG,OACE3B,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WACVgC,ICgBOO,SAtBH,WAeV,OACE1C,EAAAC,EAAAC,cAAA,QAAMyC,GAAG,MAAMxC,UAAU,OACvBH,EAAAC,EAAAC,cAAC0C,EAAD,CAASR,SAfI,CACf,CAACjB,EAAG,IAAKI,EAAG,EAAGI,EAAG,KAClB,CAACR,EAAG,EAAGI,EAAG,IAAKI,EAAG,KAClB,CAACR,EAAG,IAAKI,EAAG,IAAKI,EAAG,SCCJkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCFNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SDiH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c0e2fecc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.2b56778a.gif\";","import React from 'react';\nimport './Channel.css';\n\nconst Channel = ( {value, changeRgb} ) => {\n\n  // Take the prop \"value\", store it locally as a state variable \"num\"\n  //const [rgb, setRgb] = useState(value);\n  const rgb = value;\n\n  const updateRgb = (newRgb) => {\n    if (newRgb > 255)\n      newRgb = 255;\n    else if (newRgb < 0 || !newRgb)\n      newRgb = 0;\n\n    changeRgb(newRgb);\n  }\n\n  console.log(`Render: <Channel />`);\n  return (\n    <div className=\"channel\">\n      <button type=\"button\" className=\"btn up\" onClick={ event => updateRgb( rgb + 10 ) }>+</button>\n      <input type=\"text\" className=\"txt\" value={ rgb } onChange={ event => updateRgb( parseInt(event.target.value) ) } />\n      <button type=\"button\" className=\"btn down\" onClick={ event => updateRgb( rgb - 10 ) }>-</button>\n    </div>\n  );\n}\n\n\nexport default Channel;","import React, { useState } from 'react';\nimport './Swatch.css'\nimport Channel from './Channel';\n\nconst Swatch = ( {red, green, blue} ) => {\n\n  const [r, setR] = useState(red);\n  const [g, setG] = useState(green);\n  const [b, setB] = useState(blue);\n\n\n  const styles = {\n    backgroundColor: `rgb( ${r}, ${g}, ${b} )`,\n  };\n\n  return (\n    <li className=\"swatch\" style={ styles }>\n      <span>rgb(</span>\n      <Channel value={r} changeRgb={setR} />\n      <Channel value={g} changeRgb={setG} />\n      <Channel value={b} changeRgb={setB} />\n      <span>);</span>\n    </li>\n\n  );\n}\n\nexport default Swatch;","import React from 'react';\nimport './Palette.css';\nimport Swatch from './Swatch';\n\nconst Palette = ( {swatches} ) => {\n\n  // Create one <Swatch> for each props.swatches\n  // Iterate through the Array we received using map\n  const allSwatches = swatches.map( (col, i) => <Swatch key={i} red={col.r} green={col.g} blue={col.b} /> )\n\n  return (\n    <ul className=\"palette\">\n      { allSwatches }\n    </ul>\n  );\n}\n\nexport default Palette;\n","import React from 'react';\nimport './App.css';\nimport Palette from './Palette';\n\nimport logo from '../img/logo.gif';\n\nconst App = () => {\n\n  const palette1 = [\n    {r: 255, g: 0, b: 255},\n    {r: 0, g: 255, b: 255},\n    {r: 255, g: 255, b: 0},\n  ];\n\n  // 1. Test adding a second palette Array called `palette2`, modify the `<App />`\n  //    return to create a second <Palette /> that uses the values from `palette2`\n  // 2. Modify the CSS so that the `grid-template-columns` property of `.app` \n  //    matches the number of pallets you have\n  // 3. Create an array called `palettes` that holds the arrays `palette1` and `palette2`\n  // 4. `map()` each array to a <Palette />\n\n  return (\n    <main id=\"app\" className=\"app\">\n      <Palette swatches={ palette1 } />\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// Import React libraries\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\n// Import master CSS\nimport './reset.css';\nimport './index.css';\n\n// Import all required components\nimport App from './components/App';\n\n// Import the service worker\nimport * as serviceWorker from './serviceWorker';\n\n\n// Render the entire App into the HTML document\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}